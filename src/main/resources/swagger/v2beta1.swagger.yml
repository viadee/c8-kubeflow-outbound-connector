openapi: 3.0.1
info:
  title: Kubeflow Pipelines API
  description: This file contains REST API specification for Kubeflow Pipelines. The
    file is autogenerated from the swagger definition.
  contact:
    name: google
    url: https://www.google.com
    email: kubeflow-pipelines@google.com
  license:
    name: Apache 2.0
    url: https://raw.githubusercontent.com/kubeflow/pipelines/master/LICENSE
  version: 2.0.4
servers:
  - url: /
security:
  - Bearer: []
paths:
  /apis/v2beta1/auth:
    get:
      tags:
        - AuthService
      operationId: Authorize
      parameters:
        - name: namespace
          in: query
          schema:
            type: string
        - name: resources
          in: query
          schema:
            type: string
            default: UNASSIGNED_RESOURCES
            enum:
              - UNASSIGNED_RESOURCES
              - VIEWERS
        - name: verb
          in: query
          schema:
            type: string
            default: UNASSIGNED_VERB
            enum:
              - UNASSIGNED_VERB
              - CREATE
              - GET
              - DELETE
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/experiments:
    get:
      tags:
        - ExperimentService
      summary: "Finds all experiments. Supports pagination, and sorting on certain\
        \ fields."
      operationId: ListExperiments
      parameters:
        - name: page_token
          in: query
          description: |-
            A page token to request the next page of results. The token is acquried
            from the nextPageToken field of the response from the previous
            ListExperiments call or can be omitted when fetching the first page.
          schema:
            type: string
        - name: page_size
          in: query
          description: |-
            The number of experiments to be listed per page. If there are more
            experiments than this number, the response message will contain a
            nextPageToken field you can use to fetch the next page.
          schema:
            type: integer
            format: int32
        - name: sort_by
          in: query
          description: |-
            Can be format of "field_name", "field_name asc" or "field_name desc"
            Ascending by default.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A url-encoded, JSON-serialized Filter protocol buffer (see
            [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v2beta1/api/filter.proto)).
          schema:
            type: string
        - name: namespace
          in: query
          description: Which namespace to filter the experiments on.
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1ListExperimentsResponse'
    post:
      tags:
        - ExperimentService
      summary: Creates a new experiment.
      operationId: CreateExperiment
      requestBody:
        description: The experiment to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2beta1Experiment'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Experiment'
      x-codegen-request-body-name: body
  /apis/v2beta1/experiments/{experiment_id}:
    get:
      tags:
        - ExperimentService
      summary: Finds a specific experiment by ID.
      operationId: GetExperiment
      parameters:
        - name: experiment_id
          in: path
          description: The ID of the experiment to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Experiment'
    delete:
      tags:
        - ExperimentService
      summary: "Deletes an experiment without deleting the experiment's runs and recurring\
        \ \nruns. To avoid unexpected behaviors, delete an experiment's runs and recurring\
        \ \nruns before deleting the experiment."
      operationId: DeleteExperiment
      parameters:
        - name: experiment_id
          in: path
          description: The ID of the experiment to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
  /apis/v2beta1/experiments/{experiment_id}:archive:
    post:
      tags:
        - ExperimentService
      summary: Archives an experiment and the experiment's runs and recurring runs.
      operationId: ArchiveExperiment
      parameters:
        - name: experiment_id
          in: path
          description: The ID of the experiment to be archived.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
  /apis/v2beta1/experiments/{experiment_id}:unarchive:
    post:
      tags:
        - ExperimentService
      summary: |-
        Restores an archived experiment. The experiment's archived runs and recurring
        runs will stay archived.
      operationId: UnarchiveExperiment
      parameters:
        - name: experiment_id
          in: path
          description: The ID of the experiment to be restored.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
  /apis/v2beta1/healthz:
    get:
      tags:
        - HealthzService
      summary: Get healthz data.
      operationId: GetHealthz
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1GetHealthzResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/pipelines:
    get:
      tags:
        - PipelineService
      summary: Finds all pipelines within a namespace.
      operationId: ListPipelines
      parameters:
        - name: namespace
          in: query
          description: Optional input. Namespace for the pipelines.
          schema:
            type: string
        - name: page_token
          in: query
          description: A page token to request the results page.
          schema:
            type: string
        - name: page_size
          in: query
          description: |-
            The number of pipelines to be listed per page. If there are more pipelines
            than this number, the response message will contain a valid value in the
            nextPageToken field.
          schema:
            type: integer
            format: int32
        - name: sort_by
          in: query
          description: |-
            Sorting order in form of "field_name", "field_name asc" or "field_name desc".
            Ascending by default.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A url-encoded, JSON-serialized filter protocol buffer (see
            [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1ListPipelinesResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
    post:
      tags:
        - PipelineService
      summary: Creates a pipeline.
      operationId: CreatePipeline
      requestBody:
        description: Required input. Pipeline that needs to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2beta1Pipeline'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Pipeline'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-codegen-request-body-name: body
  /apis/v2beta1/pipelines/create:
    post:
      tags:
        - PipelineService
      summary: Creates a new pipeline and a new pipeline version in a single transaction.
      operationId: CreatePipelineAndVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2beta1CreatePipelineAndVersionRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Pipeline'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-codegen-request-body-name: body
  /apis/v2beta1/pipelines/names/{name}:
    get:
      tags:
        - PipelineService
      summary: Finds a specific pipeline by name and namespace.
      operationId: GetPipelineByName
      parameters:
        - name: name
          in: path
          description: Required input. Name of the pipeline to be retrieved.
          required: true
          schema:
            type: string
        - name: namespace
          in: query
          description: "Optional input. Namespace of the pipeline. \nIt could be empty\
          \ if default namespaces needs to be used or if multi-user \nsupport is turned\
          \ off."
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Pipeline'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/pipelines/{pipeline_id}:
    get:
      tags:
        - PipelineService
      summary: Finds a specific pipeline by ID.
      operationId: GetPipeline
      parameters:
        - name: pipeline_id
          in: path
          description: Required input. The ID of the pipeline to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Pipeline'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
    delete:
      tags:
        - PipelineService
      summary: Deletes an empty pipeline by ID. Returns error if the pipeline has
        pipeline versions.
      operationId: DeletePipeline
      parameters:
        - name: pipeline_id
          in: path
          description: Required input. ID of the pipeline to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/pipelines/{pipeline_id}/versions:
    get:
      tags:
        - PipelineService
      summary: Lists all pipeline versions of a given pipeline ID.
      operationId: ListPipelineVersions
      parameters:
        - name: pipeline_id
          in: path
          description: Required input. ID of the parent pipeline.
          required: true
          schema:
            type: string
        - name: page_token
          in: query
          description: A page token to request the results page.
          schema:
            type: string
        - name: page_size
          in: query
          description: |-
            The number of pipeline versions to be listed per page. If there are more pipeline
            versions than this number, the response message will contain a valid value in the
            nextPageToken field.
          schema:
            type: integer
            format: int32
        - name: sort_by
          in: query
          description: |-
            Sorting order in form of "field_name", "field_name asc" or "field_name desc".
            Ascending by default.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A url-encoded, JSON-serialized filter protocol buffer (see
            [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1ListPipelineVersionsResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
    post:
      tags:
        - PipelineService
      summary: Adds a pipeline version to the specified pipeline ID.
      operationId: CreatePipelineVersion
      parameters:
        - name: pipeline_id
          in: path
          description: Required input. ID of the parent pipeline.
          required: true
          schema:
            type: string
      requestBody:
        description: Required input. Pipeline version ID to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2beta1PipelineVersion'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1PipelineVersion'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-codegen-request-body-name: body
  /apis/v2beta1/pipelines/{pipeline_id}/versions/{pipeline_version_id}:
    get:
      tags:
        - PipelineService
      summary: Gets a pipeline version by pipeline version ID and pipeline ID.
      operationId: GetPipelineVersion
      parameters:
        - name: pipeline_id
          in: path
          description: Required input. ID of the parent pipeline.
          required: true
          schema:
            type: string
        - name: pipeline_version_id
          in: path
          description: Required input. ID of the pipeline version to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1PipelineVersion'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
    delete:
      tags:
        - PipelineService
      summary: Deletes a specific pipeline version by pipeline version ID and pipeline
        ID.
      operationId: DeletePipelineVersion
      parameters:
        - name: pipeline_id
          in: path
          description: Required input. ID of the parent pipeline.
          required: true
          schema:
            type: string
        - name: pipeline_version_id
          in: path
          description: Required input. The ID of the pipeline version to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/pipelines/upload:
    post:
      tags:
        - PipelineUploadService
      operationId: UploadPipeline
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: namespace
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - uploadfile
              type: object
              properties:
                uploadfile:
                  type: string
                  description: The pipeline to upload. Maximum size of 32MB is supported.
                  format: binary
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Pipeline'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/pipelines/upload_version:
    post:
      tags:
        - PipelineUploadService
      operationId: UploadPipelineVersion
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: pipelineid
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - uploadfile
              type: object
              properties:
                uploadfile:
                  type: string
                  description: The pipeline to upload. Maximum size of 32MB is supported.
                  format: binary
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1PipelineVersion'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/recurringruns:
    get:
      tags:
        - RecurringRunService
      summary: "Finds all recurring runs given experiment and namespace. \nIf experiment\
        \ ID is not specified, find all recurring runs across all experiments."
      operationId: ListRecurringRuns
      parameters:
        - name: page_token
          in: query
          description: |-
            A page token to request the next page of results. The token is acquired
            from the nextPageToken field of the response from the previous
            ListRecurringRuns call or can be omitted when fetching the first page.
          schema:
            type: string
        - name: page_size
          in: query
          description: "The number of recurring runs to be listed per page. If there\
          \ are more recurring runs \nthan this number, the response message will\
          \ contain a nextPageToken field you can use\nto fetch the next page."
          schema:
            type: integer
            format: int32
        - name: sort_by
          in: query
          description: |-
            Can be formatted as "field_name", "field_name asc" or "field_name desc".
            Ascending by default.
          schema:
            type: string
        - name: namespace
          in: query
          description: Optional input. The namespace the recurring runs belong to.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A url-encoded, JSON-serialized Filter protocol buffer (see
            [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).
          schema:
            type: string
        - name: experiment_id
          in: query
          description: "The ID of the experiment to be retrieved. If empty, list recurring\
          \ runs across all experiments."
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1ListRecurringRunsResponse'
    post:
      tags:
        - RecurringRunService
      summary: "Creates a new recurring run in an experiment, given the experiment\
        \ ID."
      operationId: CreateRecurringRun
      requestBody:
        description: The recurring run to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2beta1RecurringRun'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1RecurringRun'
      x-codegen-request-body-name: body
  /apis/v2beta1/recurringruns/{recurring_run_id}:
    get:
      tags:
        - RecurringRunService
      summary: Finds a specific recurring run by ID.
      operationId: GetRecurringRun
      parameters:
        - name: recurring_run_id
          in: path
          description: The ID of the recurring run to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1RecurringRun'
    delete:
      tags:
        - RecurringRunService
      summary: Deletes a recurring run.
      operationId: DeleteRecurringRun
      parameters:
        - name: recurring_run_id
          in: path
          description: The ID of the recurring run to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
  /apis/v2beta1/recurringruns/{recurring_run_id}:disable:
    post:
      tags:
        - RecurringRunService
      summary: Stops a recurring run and all its associated runs. The recurring run
        is not deleted.
      operationId: DisableRecurringRun
      parameters:
        - name: recurring_run_id
          in: path
          description: The ID of the recurring runs to be disabled.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
  /apis/v2beta1/recurringruns/{recurring_run_id}:enable:
    post:
      tags:
        - RecurringRunService
      summary: "Restarts a recurring run that was previously stopped. All runs associated\
        \ with the \nrecurring run will continue."
      operationId: EnableRecurringRun
      parameters:
        - name: recurring_run_id
          in: path
          description: The ID of the recurring runs to be enabled.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
  /apis/v2beta1/scheduledworkflows:
    post:
      tags:
        - ReportService
      operationId: ReportScheduledWorkflow
      requestBody:
        description: ScheduledWorkflow a ScheduledWorkflow resource marshalled into
          a json string.
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
      x-codegen-request-body-name: body
  /apis/v2beta1/workflows:
    post:
      tags:
        - ReportService
      operationId: ReportWorkflow
      requestBody:
        description: Workflow is a workflow custom resource marshalled into a json
          string.
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
      x-codegen-request-body-name: body
  /apis/v2beta1/runs:
    get:
      tags:
        - RunService
      summary: "Finds all runs in an experiment given by experiment ID. \nIf experiment\
        \ id is not specified, finds all runs across all experiments."
      operationId: ListRuns
      parameters:
        - name: namespace
          in: query
          description: Optional input field. Filters based on the namespace.
          schema:
            type: string
        - name: experiment_id
          in: query
          description: "The ID of the parent experiment. If empty, response includes\
          \ runs across all experiments."
          schema:
            type: string
        - name: page_token
          in: query
          description: |-
            A page token to request the next page of results. The token is acquired
            from the nextPageToken field of the response from the previous
            ListRuns call or can be omitted when fetching the first page.
          schema:
            type: string
        - name: page_size
          in: query
          description: |-
            The number of runs to be listed per page. If there are more runs than this
            number, the response message will contain a nextPageToken field you can use
            to fetch the next page.
          schema:
            type: integer
            format: int32
        - name: sort_by
          in: query
          description: |-
            Can be format of "field_name", "field_name asc" or "field_name desc"
            (Example, "name asc" or "id desc"). Ascending by default.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A url-encoded, JSON-serialized Filter protocol buffer (see
            [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/filter.proto)).
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1ListRunsResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
    post:
      tags:
        - RunService
      summary: "Creates a new run in an experiment specified by experiment ID. \n\
        If experiment ID is not specified, the run is created in the default experiment."
      operationId: CreateRun
      requestBody:
        description: Run to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2beta1Run'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Run'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-codegen-request-body-name: body
  /apis/v2beta1/runs/{run_id}:
    get:
      tags:
        - RunService
      summary: Finds a specific run by ID.
      operationId: GetRun
      parameters:
        - name: run_id
          in: path
          description: The ID of the run to be retrieved.
          required: true
          schema:
            type: string
        - name: experiment_id
          in: query
          description: The ID of the parent experiment.
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Run'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
    delete:
      tags:
        - RunService
      summary: Deletes a run in an experiment given by run ID and experiment ID.
      operationId: DeleteRun
      parameters:
        - name: run_id
          in: path
          description: The ID of the run to be deleted.
          required: true
          schema:
            type: string
        - name: experiment_id
          in: query
          description: The ID of the parent experiment.
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/runs/{run_id}/nodes/{node_id}/artifacts/{artifact_name}:read:
    get:
      tags:
        - RunService
      summary: Finds artifact data in a run.
      operationId: ReadArtifact
      parameters:
        - name: run_id
          in: path
          description: ID of the run.
          required: true
          schema:
            type: string
        - name: node_id
          in: path
          description: ID of the running node.
          required: true
          schema:
            type: string
        - name: artifact_name
          in: path
          description: Name of the artifact.
          required: true
          schema:
            type: string
        - name: experiment_id
          in: query
          description: The ID of the parent experiment.
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1ReadArtifactResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/runs/{run_id}:archive:
    post:
      tags:
        - RunService
      summary: Archives a run in an experiment given by run ID and experiment ID.
      operationId: ArchiveRun
      parameters:
        - name: run_id
          in: path
          description: The ID of the run to be archived.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/runs/{run_id}:retry:
    post:
      tags:
        - RunService
      summary: Re-initiates a failed or terminated run.
      operationId: RetryRun
      parameters:
        - name: run_id
          in: path
          description: The ID of the run to be retried.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/runs/{run_id}:terminate:
    post:
      tags:
        - RunService
      summary: Terminates an active run.
      operationId: TerminateRun
      parameters:
        - name: run_id
          in: path
          description: The ID of the run to be terminated.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/runs/{run_id}:unarchive:
    post:
      tags:
        - RunService
      summary: Restores an archived run in an experiment given by run ID and experiment
        ID.
      operationId: UnarchiveRun
      parameters:
        - name: run_id
          in: path
          description: The ID of the run to be restored.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
  /apis/v2beta1/visualizations/{namespace}:
    post:
      tags:
        - VisualizationService
      operationId: CreateVisualizationV1
      parameters:
        - name: namespace
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v2beta1Visualization'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v2beta1Visualization'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-codegen-request-body-name: body
components:
  schemas:
    AuthorizeRequestResources:
      type: string
      description: Type of resources in pipelines system.
      default: UNASSIGNED_RESOURCES
      enum:
        - UNASSIGNED_RESOURCES
        - VIEWERS
    AuthorizeRequestVerb:
      type: string
      description: Type of verbs that act on the resources.
      default: UNASSIGNED_VERB
      enum:
        - UNASSIGNED_VERB
        - CREATE
        - GET
        - DELETE
    googlerpcStatus:
      type: object
      properties:
        code:
          type: integer
          description: "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          format: int32
        message:
          type: string
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          description: |-
            A list of messages that carry the error details.  There is a common set of
            message types for APIs to use.
          items:
            $ref: '#/components/schemas/protobufAny'
      description: |-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It is
        used by [gRPC](https://github.com/grpc). Each `Status` message contains
        three pieces of data: error code, error message, and error details.

        You can find out more about this error model and how to work with it in the
        [API Design Guide](https://cloud.google.com/apis/design/errors).
    protobufAny:
      type: object
      properties:
        type_url:
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
        value:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    v2beta1Experiment:
      type: object
      properties:
        experiment_id:
          type: string
          description: Output. Unique experiment ID. Generated by API server.
        display_name:
          type: string
          description: Required input field. Unique experiment name provided by user.
        description:
          type: string
          description: Optional input field. Describes the purpose of the experiment.
        created_at:
          type: string
          description: Output. The time that the experiment was created.
          format: date-time
        namespace:
          type: string
          description: Optional input field. Specify the namespace this experiment
            belongs to.
        storage_state:
          $ref: '#/components/schemas/v2beta1ExperimentStorageState'
    v2beta1ExperimentStorageState:
      type: string
      description: |-
        Describes whether an entity is available or archived.

         - STORAGE_STATE_UNSPECIFIED: Default state. This state in not used
         - AVAILABLE: Entity is available.
         - ARCHIVED: Entity is archived.
      default: STORAGE_STATE_UNSPECIFIED
      enum:
        - STORAGE_STATE_UNSPECIFIED
        - AVAILABLE
        - ARCHIVED
    v2beta1ListExperimentsResponse:
      type: object
      properties:
        experiments:
          type: array
          description: A list of experiments returned.
          items:
            $ref: '#/components/schemas/v2beta1Experiment'
        total_size:
          type: integer
          description: The number of experiments for the given query.
          format: int32
        next_page_token:
          type: string
          description: The token to list the next page of experiments.
    PredicateIntValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: integer
            format: int32
      description: List of integers.
    PredicateLongValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
            format: int64
      description: List of long integers.
    PredicateStringValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
      description: List of strings.
    v2beta1Filter:
      type: object
      properties:
        predicates:
          type: array
          description: All predicates are AND-ed when this filter is applied.
          items:
            $ref: '#/components/schemas/v2beta1Predicate'
      description: |-
        Filter is used to filter resources returned from a ListXXX request.

        Example filters:
        1) Filter runs with status = 'Running'
        filter {
          predicate {
            key: "status"
            operation: EQUALS
            string_value: "Running"
          }
        }

        2) Filter runs that succeeded since Dec 1, 2018
        filter {
          predicate {
            key: "status"
            operation: EQUALS
            string_value: "Succeeded"
          }
          predicate {
            key: "created_at"
            operation: GREATER_THAN
            timestamp_value {
              seconds: 1543651200
            }
          }
        }

        3) Filter runs with one of labels 'label_1' or 'label_2'

        filter {
          predicate {
            key: "label"
            operation: IN
            string_values {
              value: 'label_1'
              value: 'label_2'
            }
          }
        }
    v2beta1Predicate:
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/v2beta1PredicateOperation'
        key:
          type: string
          description: Key for the operation (first argument).
        int_value:
          type: integer
          description: Integer.
          format: int32
        long_value:
          type: string
          description: Long integer.
          format: int64
        string_value:
          type: string
          description: String.
        timestamp_value:
          type: string
          description: |-
            Timestamp values will be converted to Unix time (seconds since the epoch)
            prior to being used in a filtering operation.
          format: date-time
        int_values:
          $ref: '#/components/schemas/PredicateIntValues'
        long_values:
          $ref: '#/components/schemas/PredicateLongValues'
        string_values:
          $ref: '#/components/schemas/PredicateStringValues'
      description: |-
        Predicate captures individual conditions that must be true for a resource
        being filtered.
    v2beta1PredicateOperation:
      type: string
      description: |-
        Operation is the operation to apply.

         - OPERATION_UNSPECIFIED: Default operation. This operation is not used.
         - EQUALS: Operation on scalar values. Only applies to one of |int_value|,
        |long_value|, |string_value| or |timestamp_value|.
         - NOT_EQUALS: Negated EQUALS.
         - GREATER_THAN: Greater than operation.
         - GREATER_THAN_EQUALS: Greater than or equals operation.
         - LESS_THAN: Less than operation.
         - LESS_THAN_EQUALS: Less than or equals operation
         - IN: Checks if the value is a member of a given array, which should be one of
        |int_values|, |long_values| or |string_values|.
         - IS_SUBSTRING: Checks if the value contains |string_value| as a substring match. Only
        applies to |string_value|.
      default: OPERATION_UNSPECIFIED
      enum:
        - OPERATION_UNSPECIFIED
        - EQUALS
        - NOT_EQUALS
        - GREATER_THAN
        - GREATER_THAN_EQUALS
        - LESS_THAN
        - LESS_THAN_EQUALS
        - IN
        - IS_SUBSTRING
    v2beta1GetHealthzResponse:
      type: object
      properties:
        multi_user:
          title: |-
            TODO(gkcalat): redesign this service to return status
            and move server configuration into a separate service
            TODO(gkcalat): rename or deprecate v1beta1 HealthzService
          type: boolean
          description: Returns if KFP in multi-user mode
          format: boolean
    protobufNullValue:
      type: string
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

         The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      default: NULL_VALUE
      enum:
        - NULL_VALUE
    v2beta1CreatePipelineAndVersionRequest:
      type: object
      properties:
        pipeline:
          $ref: '#/components/schemas/v2beta1Pipeline'
        pipeline_version:
          $ref: '#/components/schemas/v2beta1PipelineVersion'
    v2beta1ListPipelineVersionsResponse:
      type: object
      properties:
        pipeline_versions:
          type: array
          description: Returned pipeline versions.
          items:
            $ref: '#/components/schemas/v2beta1PipelineVersion'
        next_page_token:
          type: string
          description: The token to list the next page of pipeline versions.
        total_size:
          type: integer
          description: The total number of pipeline versions for the given query.
          format: int32
    v2beta1ListPipelinesResponse:
      type: object
      properties:
        pipelines:
          type: array
          description: Returned pipelines.
          items:
            $ref: '#/components/schemas/v2beta1Pipeline'
        total_size:
          type: integer
          description: The total number of pipelines for the given query.
          format: int32
        next_page_token:
          type: string
          description: |-
            The token to list the next page of pipelines.
            This token can be used on the next ListPipelinesRequest.
    v2beta1Pipeline:
      type: object
      properties:
        pipeline_id:
          type: string
          description: Output. Unique pipeline ID. Generated by API server.
        display_name:
          type: string
          description: Required input field. Pipeline name provided by user.
        description:
          type: string
          description: Optional input field. A short description of the pipeline.
        created_at:
          type: string
          description: Output. Creation time of the pipeline.
          format: date-time
        namespace:
          type: string
          description: |-
            Input. A namespace this pipeline belongs to.
            Causes error if user is not authorized to access the specified namespace.
            If not specified in CreatePipeline, default namespace is used.
        error:
          $ref: '#/components/schemas/googlerpcStatus'
    v2beta1PipelineVersion:
      type: object
      properties:
        pipeline_id:
          type: string
          description: Required input field. Unique ID of the parent pipeline.
        pipeline_version_id:
          type: string
          description: Output. Unique pipeline version ID. Generated by API server.
        display_name:
          type: string
          description: Required input field. Pipeline version name provided by user.
        description:
          type: string
          description: Optional input field. Short description of the pipeline version.
        created_at:
          type: string
          description: Output. Creation time of the pipeline version.
          format: date-time
        package_url:
          $ref: '#/components/schemas/v2beta1Url'
        code_source_url:
          type: string
          description: |-
            Input. Optional. The URL to the code source of the pipeline version.
            The code is usually the Python definition of the pipeline and potentially
            related the component definitions. This allows users to trace back to how
            the pipeline YAML was created.
        pipeline_spec:
          type: object
          properties: {}
          description: Output. The pipeline spec for the pipeline version.
        error:
          $ref: '#/components/schemas/googlerpcStatus'
    v2beta1Url:
      type: object
      properties:
        pipeline_url:
          type: string
          description: URL of the pipeline version definition.
    RecurringRunMode:
      type: string
      description: "Required input.\nUser setting to enable or disable the recurring\
        \ run. \nOnly used for creation of recurring runs. Later updates use enable/disable\
        \ API.\n\n - DISABLE: The recurring run won't schedule any run if disabled."
      default: MODE_UNSPECIFIED
      enum:
        - MODE_UNSPECIFIED
        - ENABLE
        - DISABLE
    v2beta1CronSchedule:
      type: object
      properties:
        start_time:
          type: string
          description: The start time of the cron job.
          format: date-time
        end_time:
          type: string
          description: The end time of the cron job.
          format: date-time
        cron:
          title: |-
            The cron string. For details how to compose a cron, visit
            ttps://en.wikipedia.org/wiki/Cron
          type: string
      description: CronSchedule allow scheduling the recurring run with unix-like
        cron.
    v2beta1ListRecurringRunsResponse:
      type: object
      properties:
        recurringRuns:
          type: array
          description: A list of recurring runs returned.
          items:
            $ref: '#/components/schemas/v2beta1RecurringRun'
        total_size:
          type: integer
          description: The total number of recurring runs for the given query.
          format: int32
        next_page_token:
          type: string
          description: The token to list the next page of recurring runs.
    v2beta1PeriodicSchedule:
      type: object
      properties:
        start_time:
          type: string
          description: The start time of the periodic recurring run.
          format: date-time
        end_time:
          type: string
          description: The end time of the periodic recurring run.
          format: date-time
        interval_second:
          type: string
          description: The time interval between the starting time of consecutive
            recurring runs.
          format: int64
      description: PeriodicSchedule allow scheduling the recurring run periodically
        with certain interval.
    v2beta1PipelineVersionReference:
      type: object
      properties:
        pipeline_id:
          type: string
          description: Input. Required. Unique ID of the parent pipeline.
        pipeline_version_id:
          type: string
          description: Input. Required. Unique ID of an existing pipeline version.
      description: Reference to an existing pipeline version.
    v2beta1RecurringRun:
      type: object
      properties:
        recurring_run_id:
          type: string
          description: Output. Unique run ID generated by API server.
        display_name:
          type: string
          description: Required input field. Recurring run name provided by user.
            Not unique.
        description:
          type: string
          description: Optional input field. Describes the purpose of the recurring
            run.
        pipeline_version_id:
          type: string
          description: The ID of the pipeline version used for creating runs.
        pipeline_spec:
          type: object
          properties: {}
          description: The pipeline spec.
        pipeline_version_reference:
          $ref: '#/components/schemas/v2beta1PipelineVersionReference'
        runtime_config:
          $ref: '#/components/schemas/v2beta1RuntimeConfig'
        service_account:
          type: string
          description: Optional input field. Specifies which Kubernetes service account
            this recurring run uses.
        max_concurrency:
          type: string
          description: |-
            Required input field.
            Specifies how many runs can be executed concurrently. Range [1-10].
          format: int64
        trigger:
          $ref: '#/components/schemas/v2beta1Trigger'
        mode:
          $ref: '#/components/schemas/RecurringRunMode'
        created_at:
          type: string
          description: Output. The time this recurring run was created.
          format: date-time
        updated_at:
          type: string
          description: Output. The last time this recurring run was updated.
          format: date-time
        status:
          $ref: '#/components/schemas/v2beta1RecurringRunStatus'
        error:
          $ref: '#/components/schemas/googlerpcStatus'
        no_catchup:
          type: boolean
          description: |-
            Optional input field. Whether the recurring run should catch up if behind schedule.
            If true, the recurring run will only schedule the latest interval if behind schedule.
            If false, the recurring run will catch up on each past interval.
          format: boolean
        namespace:
          type: string
          description: |-
            TODO (gkclat): consider removing this field if it can be obtained from the parent experiment.
            Output only. Namespace this recurring run belongs to. Derived from the parent experiment.
          readOnly: true
        experiment_id:
          type: string
          description: ID of the parent experiment this recurring run belongs to.
    v2beta1RecurringRunStatus:
      type: string
      description: Output. The status of the recurring run.
      default: STATUS_UNSPECIFIED
      enum:
        - STATUS_UNSPECIFIED
        - ENABLED
        - DISABLED
    v2beta1RuntimeConfig:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: |-
            The runtime parameters of the Pipeline. The parameters will be
            used to replace the placeholders at runtime.
        pipeline_root:
          title: "A path in a object store bucket which will be treated as the root\n\
            output directory of the pipeline. It is used by the system to\ngenerate\
            \ the paths of output artifacts. \nRef:(https://www.kubeflow.org/docs/components/pipelines/pipeline-root/)"
          type: string
      description: The runtime config.
    v2beta1Trigger:
      type: object
      properties:
        cron_schedule:
          $ref: '#/components/schemas/v2beta1CronSchedule'
        periodic_schedule:
          $ref: '#/components/schemas/v2beta1PeriodicSchedule'
      description: Trigger defines what starts a pipeline run.
    PipelineTaskDetailChildTask:
      type: object
      properties:
        task_id:
          type: string
          description: System-generated ID of a task.
        pod_name:
          type: string
          description: |-
            Name of the corresponding pod assigned by the orchestration engine.
            Also known as node_id.
      description: |-
        A dependent task that requires this one to succeed.
        Represented by either task_id or pod_name.
    v2beta1ArtifactList:
      type: object
      properties:
        artifact_ids:
          type: array
          description: A list of artifact metadata ids.
          items:
            type: string
            format: int64
      description: A list of artifact metadata.
    v2beta1ListRunsResponse:
      type: object
      properties:
        runs:
          type: array
          description: List of retrieved runs.
          items:
            $ref: '#/components/schemas/v2beta1Run'
        total_size:
          type: integer
          description: The total number of runs for the given query.
          format: int32
        next_page_token:
          type: string
          description: The token to list the next page of runs.
    v2beta1PipelineTaskDetail:
      type: object
      properties:
        run_id:
          type: string
          description: ID of the parent run.
        task_id:
          type: string
          description: System-generated ID of a task.
        display_name:
          type: string
          description: |-
            User specified name of a task that is defined in
            [Pipeline.spec][].
        create_time:
          type: string
          description: Creation time of a task.
          format: date-time
        start_time:
          type: string
          description: Starting time of a task.
          format: date-time
        end_time:
          type: string
          description: Completion time of a task.
          format: date-time
        executor_detail:
          $ref: '#/components/schemas/v2beta1PipelineTaskExecutorDetail'
        state:
          $ref: '#/components/schemas/v2beta1RuntimeState'
        execution_id:
          type: string
          description: Execution id of the corresponding entry in ML metadata store.
          format: int64
        error:
          $ref: '#/components/schemas/googlerpcStatus'
        inputs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v2beta1ArtifactList'
          description: Input artifacts of the task.
        outputs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/v2beta1ArtifactList'
          description: Output artifacts of the task.
        parent_task_id:
          type: string
          description: |-
            ID of the parent task if the task is within a component scope.
            Empty if the task is at the root level.
        state_history:
          type: array
          description: "A sequence of task statuses. This field keeps a record \n\
            of state transitions."
          items:
            $ref: '#/components/schemas/v2beta1RuntimeStatus'
        pod_name:
          type: string
          description: |-
            Name of the corresponding pod assigned by the orchestration engine.
            Also known as node_id.
        child_tasks:
          type: array
          description: Sequence of dependen tasks.
          items:
            $ref: '#/components/schemas/PipelineTaskDetailChildTask'
      description: Runtime information of a task execution.
    v2beta1PipelineTaskExecutorDetail:
      type: object
      properties:
        main_job:
          type: string
          description: The name of the job for the main container execution.
        pre_caching_check_job:
          type: string
          description: |-
            The name of the job for the pre-caching-check container
            execution. This job will be available if the
            Run.pipeline_spec specifies the `pre_caching_check` hook in
            the lifecycle events.
        failed_main_jobs:
          type: array
          description: |-
            The names of the previously failed job for the main container
            executions. The list includes the all attempts in chronological order.
          items:
            type: string
        failed_pre_caching_check_jobs:
          type: array
          description: |-
            The names of the previously failed job for the
            pre-caching-check container executions. This job will be available if the
            Run.pipeline_spec specifies the `pre_caching_check` hook in
            the lifecycle events.
            The list includes the all attempts in chronological order.
          items:
            type: string
      description: Runtime information of a pipeline task executor.
    v2beta1ReadArtifactResponse:
      type: object
      properties:
        data:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: Byte array of the artifact content.
          format: byte
    v2beta1Run:
      type: object
      properties:
        experiment_id:
          type: string
          description: |-
            Input. ID of the parent experiment.
            The default experiment ID will be used if this is not specified.
        run_id:
          type: string
          description: Output. Unique run ID. Generated by API server.
        display_name:
          type: string
          description: |-
            Required input. Name provided by user,
            or auto generated if run is created by a recurring run.
        storage_state:
          $ref: '#/components/schemas/v2beta1RunStorageState'
        description:
          type: string
          description: Optional input. Short description of the run.
        pipeline_version_id:
          type: string
          description: ID of an existing pipeline version.
        pipeline_spec:
          type: object
          properties: {}
          description: Pipeline spec.
        pipeline_version_reference:
          $ref: '#/components/schemas/v2beta1PipelineVersionReference'
        runtime_config:
          $ref: '#/components/schemas/v2beta1RuntimeConfig'
        service_account:
          type: string
          description: Optional input. Specifies which kubernetes service account
            is used.
        created_at:
          type: string
          description: Output. Creation time of the run.
          format: date-time
        scheduled_at:
          type: string
          description: |-
            Output. When this run is scheduled to start. This could be different from
            created_at. For example, if a run is from a backfilling job that was supposed
            to run 2 month ago, the created_at will be 2 month behind scheduled_at.
          format: date-time
        finished_at:
          type: string
          description: Output. Completion of the run.
          format: date-time
        state:
          $ref: '#/components/schemas/v2beta1RuntimeState'
        error:
          $ref: '#/components/schemas/googlerpcStatus'
        run_details:
          $ref: '#/components/schemas/v2beta1RunDetails'
        recurring_run_id:
          type: string
          description: ID of the recurring run that triggered this run.
        state_history:
          type: array
          description: "Output. A sequence of run statuses. This field keeps a record\
            \ \nof state transitions."
          items:
            $ref: '#/components/schemas/v2beta1RuntimeStatus'
    v2beta1RunDetails:
      type: object
      properties:
        pipeline_context_id:
          type: string
          description: Pipeline context ID of a run.
          format: int64
        pipeline_run_context_id:
          type: string
          description: Pipeline run context ID of a run.
          format: int64
        task_details:
          type: array
          description: Runtime details of the tasks that belong to the run.
          items:
            $ref: '#/components/schemas/v2beta1PipelineTaskDetail'
      description: Runtime details of a run.
    v2beta1RunStorageState:
      type: string
      description: |-
        Describes whether an entity is available or archived.

         - STORAGE_STATE_UNSPECIFIED: Default state. This state in not used
         - AVAILABLE: Entity is available.
         - ARCHIVED: Entity is archived.
      default: STORAGE_STATE_UNSPECIFIED
      enum:
        - STORAGE_STATE_UNSPECIFIED
        - AVAILABLE
        - ARCHIVED
    v2beta1RuntimeState:
      type: string
      description: |-
        Describes the runtime state of an entity.

         - RUNTIME_STATE_UNSPECIFIED: Default value. This value is not used.
         - PENDING: Service is preparing to execute an entity.
         - RUNNING: Entity execution is in progress.
         - SUCCEEDED: Entity completed successfully.
         - SKIPPED: Entity has been skipped. For example, due to caching.
         - FAILED: Entity execution has failed.
         - CANCELING: Entity is being canceled. From this state, an entity may only
        change its state to SUCCEEDED, FAILED or CANCELED.
         - CANCELED: Entity has been canceled.
         - PAUSED: Entity has been paused. It can be resumed.
      default: RUNTIME_STATE_UNSPECIFIED
      enum:
        - RUNTIME_STATE_UNSPECIFIED
        - PENDING
        - RUNNING
        - SUCCEEDED
        - SKIPPED
        - FAILED
        - CANCELING
        - CANCELED
        - PAUSED
    v2beta1RuntimeStatus:
      type: object
      properties:
        update_time:
          type: string
          description: Update time of this state.
          format: date-time
        state:
          $ref: '#/components/schemas/v2beta1RuntimeState'
        error:
          $ref: '#/components/schemas/googlerpcStatus'
      description: Timestamped representation of a runtime state with an optional
        error.
    v2beta1Visualization:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/v2beta1VisualizationType'
        source:
          type: string
          description: |-
            Path pattern of input data to be used during generation of visualizations.
            This is required when creating the pipeline through CreateVisualization
            API.
        arguments:
          type: string
          description: |-
            Variables to be used during generation of a visualization.
            This should be provided as a JSON string.
            This is required when creating the pipeline through CreateVisualization
            API.
        html:
          type: string
          description: Output. Generated visualization html.
        error:
          type: string
          description: |-
            In case any error happens when generating visualizations, only
            visualization ID and the error message are returned. Client has the
            flexibility of choosing how to handle the error.
    v2beta1VisualizationType:
      type: string
      description: |-
        Type of visualization to be generated.
        This is required when creating the pipeline through CreateVisualization
        API.
      default: ROC_CURVE
      enum:
        - ROC_CURVE
        - TFDV
        - TFMA
        - TABLE
        - CUSTOM
  securitySchemes:
    Bearer:
      type: apiKey
      name: authorization
      in: header
x-original-swagger-version: "2.0"
