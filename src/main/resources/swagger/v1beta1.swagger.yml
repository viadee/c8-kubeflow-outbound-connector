openapi: 3.0.1
info:
  title: Kubeflow Pipelines API
  description: This file contains REST API specification for Kubeflow Pipelines. The
    file is autogenerated from the swagger definition.
  contact:
    name: google
    url: https://www.google.com
    email: kubeflow-pipelines@google.com
  license:
    name: Apache 2.0
    url: https://raw.githubusercontent.com/kubeflow/pipelines/master/LICENSE
  version: 2.0.4
servers:
  - url: /
security:
  - Bearer: []
paths:
  /apis/v1beta1/experiments:
    get:
      tags:
        - ExperimentService
      summary: "Finds all experiments. Supports pagination, and sorting on certain\
        \ fields."
      operationId: ListExperimentsV1
      parameters:
        - name: page_token
          in: query
          description: |-
            A page token to request the next page of results. The token is acquried
            from the nextPageToken field of the response from the previous
            ListExperiment call or can be omitted when fetching the first page.
          schema:
            type: string
        - name: page_size
          in: query
          description: |-
            The number of experiments to be listed per page. If there are more
            experiments than this number, the response message will contain a
            nextPageToken field you can use to fetch the next page.
          schema:
            type: integer
            format: int32
        - name: sort_by
          in: query
          description: |-
            Can be format of "field_name", "field_name asc" or "field_name desc"
            Ascending by default.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A url-encoded, JSON-serialized Filter protocol buffer (see
            [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v1beta1/filter.proto)).
          schema:
            type: string
        - name: resource_reference_key.type
          in: query
          description: The type of the resource that referred to.
          schema:
            type: string
            default: UNKNOWN_RESOURCE_TYPE
            enum:
              - UNKNOWN_RESOURCE_TYPE
              - EXPERIMENT
              - JOB
              - PIPELINE
              - PIPELINE_VERSION
              - NAMESPACE
        - name: resource_reference_key.id
          in: query
          description: The ID of the resource that referred to.
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiListExperimentsResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
    post:
      tags:
        - ExperimentService
      summary: Creates a new experiment.
      operationId: CreateExperimentV1
      requestBody:
        description: The experiment to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiExperiment'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiExperiment'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
      x-codegen-request-body-name: body
  /apis/v1beta1/experiments/{id}:
    get:
      tags:
        - ExperimentService
      summary: Finds a specific experiment by ID.
      operationId: GetExperimentV1
      parameters:
        - name: id
          in: path
          description: The ID of the experiment to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiExperiment'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
    delete:
      tags:
        - ExperimentService
      summary: |-
        Deletes an experiment without deleting the experiment's runs and jobs. To
        avoid unexpected behaviors, delete an experiment's runs and jobs before
        deleting the experiment.
      operationId: DeleteExperimentV1
      parameters:
        - name: id
          in: path
          description: The ID of the experiment to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/experiments/{id}:archive:
    post:
      tags:
        - ExperimentService
      summary: Archives an experiment and the experiment's runs and jobs.
      operationId: ArchiveExperimentV1
      parameters:
        - name: id
          in: path
          description: The ID of the experiment to be archived.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/experiments/{id}:unarchive:
    post:
      tags:
        - ExperimentService
      summary: |-
        Restores an archived experiment. The experiment's archived runs and jobs
        will stay archived.
      operationId: UnarchiveExperimentV1
      parameters:
        - name: id
          in: path
          description: The ID of the experiment to be restored.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/runs:
    get:
      tags:
        - RunService
      summary: Finds all runs.
      operationId: ListRunsV1
      parameters:
        - name: page_token
          in: query
          description: |-
            A page token to request the next page of results. The token is acquried
            from the nextPageToken field of the response from the previous
            ListRuns call or can be omitted when fetching the first page.
          schema:
            type: string
        - name: page_size
          in: query
          description: |-
            The number of runs to be listed per page. If there are more runs than this
            number, the response message will contain a nextPageToken field you can use
            to fetch the next page.
          schema:
            type: integer
            format: int32
        - name: sort_by
          in: query
          description: |-
            Can be format of "field_name", "field_name asc" or "field_name desc"
            (Example, "name asc" or "id desc"). Ascending by default.
          schema:
            type: string
        - name: resource_reference_key.type
          in: query
          description: The type of the resource that referred to.
          schema:
            type: string
            default: UNKNOWN_RESOURCE_TYPE
            enum:
              - UNKNOWN_RESOURCE_TYPE
              - EXPERIMENT
              - JOB
              - PIPELINE
              - PIPELINE_VERSION
              - NAMESPACE
        - name: resource_reference_key.id
          in: query
          description: The ID of the resource that referred to.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A url-encoded, JSON-serialized Filter protocol buffer (see
            [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v1beta1/filter.proto)).
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiListRunsResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
    post:
      tags:
        - RunService
      summary: Creates a new run.
      operationId: CreateRunV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiRun'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiRunDetail'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
      x-codegen-request-body-name: body
  /apis/v1beta1/runs/{id}:
    delete:
      tags:
        - RunService
      summary: Deletes a run.
      operationId: DeleteRunV1
      parameters:
        - name: id
          in: path
          description: The ID of the run to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/runs/{id}:archive:
    post:
      tags:
        - RunService
      summary: Archives a run.
      operationId: ArchiveRunV1
      parameters:
        - name: id
          in: path
          description: The ID of the run to be archived.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/runs/{id}:unarchive:
    post:
      tags:
        - RunService
      summary: Restores an archived run.
      operationId: UnarchiveRunV1
      parameters:
        - name: id
          in: path
          description: The ID of the run to be restored.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/runs/{run_id}:
    get:
      tags:
        - RunService
      summary: Finds a specific run by ID.
      operationId: GetRunV1
      parameters:
        - name: run_id
          in: path
          description: The ID of the run to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiRunDetail'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/runs/{run_id}/nodes/{node_id}/artifacts/{artifact_name}:read:
    get:
      tags:
        - RunService
      summary: Finds a run's artifact data.
      operationId: ReadArtifactV1
      parameters:
        - name: run_id
          in: path
          description: The ID of the run.
          required: true
          schema:
            type: string
        - name: node_id
          in: path
          description: The ID of the running node.
          required: true
          schema:
            type: string
        - name: artifact_name
          in: path
          description: The name of the artifact.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiReadArtifactResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/runs/{run_id}/retry:
    post:
      tags:
        - RunService
      summary: Re-initiates a failed or terminated run.
      operationId: RetryRunV1
      parameters:
        - name: run_id
          in: path
          description: The ID of the run to be retried.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/runs/{run_id}/terminate:
    post:
      tags:
        - RunService
      summary: Terminates an active run.
      operationId: TerminateRunV1
      parameters:
        - name: run_id
          in: path
          description: The ID of the run to be terminated.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/runs/{run_id}:reportMetrics:
    post:
      tags:
        - RunService
      summary: |-
        ReportRunMetrics reports metrics of a run. Each metric is reported in its
        own transaction, so this API accepts partial failures. Metric can be
        uniquely identified by (run_id, node_id, name). Duplicate reporting will be
        ignored by the API. First reporting wins.
      operationId: ReportRunMetricsV1
      parameters:
        - name: run_id
          in: path
          description: Required. The parent run ID of the metric.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiReportRunMetricsRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiReportRunMetricsResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
      x-codegen-request-body-name: body
  /apis/v1beta1/jobs:
    get:
      tags:
        - JobService
      summary: Finds all jobs.
      operationId: ListJobs
      parameters:
        - name: page_token
          in: query
          description: |-
            A page token to request the next page of results. The token is acquried
            from the nextPageToken field of the response from the previous
            ListJobs call or can be omitted when fetching the first page.
          schema:
            type: string
        - name: page_size
          in: query
          description: |-
            The number of jobs to be listed per page. If there are more jobs than this
            number, the response message will contain a nextPageToken field you can use
            to fetch the next page.
          schema:
            type: integer
            format: int32
        - name: sort_by
          in: query
          description: |-
            Can be format of "field_name", "field_name asc" or "field_name desc".
            Ascending by default.
          schema:
            type: string
        - name: resource_reference_key.type
          in: query
          description: The type of the resource that referred to.
          schema:
            type: string
            default: UNKNOWN_RESOURCE_TYPE
            enum:
              - UNKNOWN_RESOURCE_TYPE
              - EXPERIMENT
              - JOB
              - PIPELINE
              - PIPELINE_VERSION
              - NAMESPACE
        - name: resource_reference_key.id
          in: query
          description: The ID of the resource that referred to.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A url-encoded, JSON-serialized Filter protocol buffer (see
            [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v1beta1/filter.proto)).
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiListJobsResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
    post:
      tags:
        - JobService
      summary: Creates a new job.
      operationId: CreateJob
      requestBody:
        description: The job to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiJob'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiJob'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
      x-codegen-request-body-name: body
  /apis/v1beta1/jobs/{id}:
    get:
      tags:
        - JobService
      summary: Finds a specific job by ID.
      operationId: GetJob
      parameters:
        - name: id
          in: path
          description: The ID of the job to be retrieved
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiJob'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
    delete:
      tags:
        - JobService
      summary: Deletes a job.
      operationId: DeleteJob
      parameters:
        - name: id
          in: path
          description: The ID of the job to be deleted
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/jobs/{id}/disable:
    post:
      tags:
        - JobService
      summary: Stops a job and all its associated runs. The job is not deleted.
      operationId: DisableJob
      parameters:
        - name: id
          in: path
          description: The ID of the job to be disabled
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/jobs/{id}/enable:
    post:
      tags:
        - JobService
      summary: Restarts a job that was previously stopped. All runs associated with
        the job will continue.
      operationId: EnableJob
      parameters:
        - name: id
          in: path
          description: The ID of the job to be enabled
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/namespaces/{namespace}/pipelines/{name}:
    get:
      tags:
        - PipelineService
      summary: Finds a pipeline by Name (and namespace)
      operationId: GetPipelineByNameV1
      parameters:
        - name: namespace
          in: path
          description: |-
            The Namespace the pipeline belongs to.
            In the case of shared pipelines and KFPipeline standalone installation,
            the pipeline name is the only needed field for unique resource lookup (namespace is not required).
            In those case, please provide hyphen (dash character, "-").
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: The Name of the pipeline to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiPipeline'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/pipeline_versions:
    get:
      tags:
        - PipelineService
      summary: Lists all pipeline versions of a given pipeline.
      operationId: ListPipelineVersionsV1
      parameters:
        - name: resource_key.type
          in: query
          description: The type of the resource that referred to.
          schema:
            type: string
            default: UNKNOWN_RESOURCE_TYPE
            enum:
              - UNKNOWN_RESOURCE_TYPE
              - EXPERIMENT
              - JOB
              - PIPELINE
              - PIPELINE_VERSION
              - NAMESPACE
        - name: resource_key.id
          in: query
          description: The ID of the resource that referred to.
          schema:
            type: string
        - name: page_size
          in: query
          description: |-
            The number of pipeline versions to be listed per page. If there are more
            pipeline versions than this number, the response message will contain a
            nextPageToken field you can use to fetch the next page.
          schema:
            type: integer
            format: int32
        - name: page_token
          in: query
          description: |-
            A page token to request the next page of results. The token is acquried
            from the nextPageToken field of the response from the previous
            ListPipelineVersions call or can be omitted when fetching the first page.
          schema:
            type: string
        - name: sort_by
          in: query
          description: |-
            Can be format of "field_name", "field_name asc" or "field_name desc"
            Ascending by default.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A base-64 encoded, JSON-serialized Filter protocol buffer (see
            filter.proto).
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiListPipelineVersionsResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
    post:
      tags:
        - PipelineService
      summary: Adds a pipeline version to the specified pipeline.
      operationId: CreatePipelineVersionV1
      requestBody:
        description: |-
          ResourceReference inside PipelineVersion specifies the pipeline that this
          version belongs to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiPipelineVersion'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiPipelineVersion'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
      x-codegen-request-body-name: body
  /apis/v1beta1/pipeline_versions/{version_id}:
    get:
      tags:
        - PipelineService
      summary: Gets a pipeline version by pipeline version ID.
      operationId: GetPipelineVersionV1
      parameters:
        - name: version_id
          in: path
          description: The ID of the pipeline version to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiPipelineVersion'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
    delete:
      tags:
        - PipelineService
      summary: |-
        Deletes a pipeline version by pipeline version ID. If the deleted pipeline
        version is the default pipeline version, the pipeline's default version
        changes to the pipeline's most recent pipeline version. If there are no
        remaining pipeline versions, the pipeline will have no default version.
        Examines the run_service_api.ipynb notebook to learn more about creating a
        run using a pipeline version (https://github.com/kubeflow/pipelines/blob/master/tools/benchmarks/run_service_api.ipynb).
      operationId: DeletePipelineVersionV1
      parameters:
        - name: version_id
          in: path
          description: The ID of the pipeline version to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/pipeline_versions/{version_id}/templates:
    get:
      tags:
        - PipelineService
      summary: "Returns a YAML template that contains the specified pipeline version's\
        \ description, parameters and metadata."
      operationId: GetPipelineVersionTemplate
      parameters:
        - name: version_id
          in: path
          description: The ID of the pipeline version whose template is to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetTemplateResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/pipelines:
    get:
      tags:
        - PipelineService
      summary: Finds all pipelines.
      operationId: ListPipelinesV1
      parameters:
        - name: page_token
          in: query
          description: |-
            A page token to request the next page of results. The token is acquried
            from the nextPageToken field of the response from the previous
            ListPipelines call.
          schema:
            type: string
        - name: page_size
          in: query
          description: |-
            The number of pipelines to be listed per page. If there are more pipelines
            than this number, the response message will contain a valid value in the
            nextPageToken field.
          schema:
            type: integer
            format: int32
        - name: sort_by
          in: query
          description: |-
            Can be format of "field_name", "field_name asc" or "field_name desc"
            Ascending by default.
          schema:
            type: string
        - name: filter
          in: query
          description: |-
            A url-encoded, JSON-serialized Filter protocol buffer (see
            [filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v1beta1/filter.proto)).
          schema:
            type: string
        - name: resource_reference_key.type
          in: query
          description: The type of the resource that referred to.
          schema:
            type: string
            default: UNKNOWN_RESOURCE_TYPE
            enum:
              - UNKNOWN_RESOURCE_TYPE
              - EXPERIMENT
              - JOB
              - PIPELINE
              - PIPELINE_VERSION
              - NAMESPACE
        - name: resource_reference_key.id
          in: query
          description: The ID of the resource that referred to.
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiListPipelinesResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
    post:
      tags:
        - PipelineService
      summary: Creates a pipeline.
      operationId: CreatePipelineV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiPipeline'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiPipeline'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
      x-codegen-request-body-name: body
  /apis/v1beta1/pipelines/{id}:
    get:
      tags:
        - PipelineService
      summary: Finds a specific pipeline by ID.
      operationId: GetPipelineV1
      parameters:
        - name: id
          in: path
          description: The ID of the pipeline to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiPipeline'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
    delete:
      tags:
        - PipelineService
      summary: Deletes a pipeline and its pipeline versions.
      operationId: DeletePipelineV1
      parameters:
        - name: id
          in: path
          description: The ID of the pipeline to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/pipelines/{id}/templates:
    get:
      tags:
        - PipelineService
      summary: "Returns a single YAML template that contains the description, parameters,\
        \ and metadata associated with the pipeline provided."
      operationId: GetTemplate
      parameters:
        - name: id
          in: path
          description: The ID of the pipeline whose template is to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetTemplateResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/pipelines/{pipeline_id}/default_version/{version_id}:
    post:
      tags:
        - PipelineService
      summary: Update the default pipeline version of a specific pipeline.
      operationId: UpdatePipelineDefaultVersionV1
      parameters:
        - name: pipeline_id
          in: path
          description: The ID of the pipeline to be updated.
          required: true
          schema:
            type: string
        - name: version_id
          in: path
          description: The ID of the default version.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                type: object
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/pipelines/upload:
    post:
      tags:
        - PipelineUploadService
      operationId: UploadPipeline
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: namespace
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - uploadfile
              type: object
              properties:
                uploadfile:
                  type: string
                  description: The pipeline to upload. Maximum size of 32MB is supported.
                  format: binary
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiPipeline'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/pipelines/upload_version:
    post:
      tags:
        - PipelineUploadService
      operationId: UploadPipelineVersion
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: pipelineid
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: namespace
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - uploadfile
              type: object
              properties:
                uploadfile:
                  type: string
                  description: The pipeline to upload. Maximum size of 32MB is supported.
                  format: binary
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiPipelineVersion'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
  /apis/v1beta1/healthz:
    get:
      tags:
        - HealthzService
      summary: Get healthz data.
      operationId: GetHealthz
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiGetHealthzResponse'
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatus'
components:
  schemas:
    apiExperiment:
      type: object
      properties:
        id:
          type: string
          description: Output. Unique experiment ID. Generated by API server.
        name:
          type: string
          description: Required input field. Unique experiment name provided by user.
        description:
          title: Optional input field. Describing the purpose of the experiment
          type: string
        created_at:
          type: string
          description: Output. The time that the experiment created.
          format: date-time
        resource_references:
          type: array
          description: |-
            Optional input field. Specify which resource this run belongs to.
            For Experiment, the only valid resource reference is a single Namespace.
          items:
            $ref: '#/components/schemas/apiResourceReference'
        storage_state:
          $ref: '#/components/schemas/apiExperimentStorageState'
    apiExperimentStorageState:
      type: string
      default: STORAGESTATE_UNSPECIFIED
      enum:
        - STORAGESTATE_UNSPECIFIED
        - STORAGESTATE_AVAILABLE
        - STORAGESTATE_ARCHIVED
    apiListExperimentsResponse:
      type: object
      properties:
        experiments:
          type: array
          description: A list of experiments returned.
          items:
            $ref: '#/components/schemas/apiExperiment'
        total_size:
          type: integer
          description: The total number of experiments for the given query.
          format: int32
        next_page_token:
          type: string
          description: The token to list the next page of experiments.
    apiRelationship:
      type: string
      default: UNKNOWN_RELATIONSHIP
      enum:
        - UNKNOWN_RELATIONSHIP
        - OWNER
        - CREATOR
    apiResourceKey:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/apiResourceType'
        id:
          type: string
          description: The ID of the resource that referred to.
    apiResourceReference:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/apiResourceKey'
        name:
          type: string
          description: The name of the resource that referred to.
        relationship:
          $ref: '#/components/schemas/apiRelationship'
    apiResourceType:
      type: string
      default: UNKNOWN_RESOURCE_TYPE
      enum:
        - UNKNOWN_RESOURCE_TYPE
        - EXPERIMENT
        - JOB
        - PIPELINE
        - PIPELINE_VERSION
        - NAMESPACE
    apiStatus:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
          format: int32
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
    protobufAny:
      type: object
      properties:
        type_url:
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
        value:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    PipelineSpecRuntimeConfig:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: |-
            The runtime parameters of the PipelineSpec. The parameters will be
            used to replace the placeholders
            at runtime.
        pipeline_root:
          title: |-
            A path in a object store bucket which will be treated as the root
            output directory of the pipeline. It is used by the system to
            generate the paths of output artifacts. Ref:(https://www.kubeflow.org/docs/components/pipelines/pipeline-root/)
          type: string
      description: The runtime config of a PipelineSpec.
    ReportRunMetricsResponseReportRunMetricResult:
      type: object
      properties:
        metric_name:
          type: string
          description: Output. The name of the metric.
        metric_node_id:
          type: string
          description: Output. The ID of the node which reports the metric.
        status:
          $ref: '#/components/schemas/ReportRunMetricsResponseReportRunMetricResultStatus'
        message:
          type: string
          description: Output. The detailed message of the error of the reporting.
    ReportRunMetricsResponseReportRunMetricResultStatus:
      type: string
      description: |2-
         - UNSPECIFIED: Default value if not present.
         - OK: Indicates successful reporting.
         - INVALID_ARGUMENT: Indicates that the payload of the metric is invalid.
         - DUPLICATE_REPORTING: Indicates that the metric has been reported before.
         - INTERNAL_ERROR: Indicates that something went wrong in the server.
      default: UNSPECIFIED
      enum:
        - UNSPECIFIED
        - OK
        - INVALID_ARGUMENT
        - DUPLICATE_REPORTING
        - INTERNAL_ERROR
    RunMetricFormat:
      type: string
      description: |2-
         - UNSPECIFIED: Default value if not present.
         - RAW: Display value as its raw format.
         - PERCENTAGE: Display value in percentage format.
      default: UNSPECIFIED
      enum:
        - UNSPECIFIED
        - RAW
        - PERCENTAGE
    apiListRunsResponse:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/apiRun'
        total_size:
          type: integer
          description: The total number of runs for the given query.
          format: int32
        next_page_token:
          type: string
          description: The token to list the next page of runs.
    apiParameter:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    apiPipelineRuntime:
      type: object
      properties:
        pipeline_manifest:
          type: string
          description: |-
            Output. The runtime JSON manifest of the pipeline, including the status
            of pipeline steps and fields need for UI visualization etc.
        workflow_manifest:
          type: string
          description: |-
            Output. The runtime JSON manifest of the argo workflow.
            This is deprecated after pipeline_runtime_manifest is in use.
    apiPipelineSpec:
      type: object
      properties:
        pipeline_id:
          type: string
          description: Optional input field. The ID of the pipeline user uploaded
            before.
        pipeline_name:
          type: string
          description: |-
            Optional output field. The name of the pipeline.
            Not empty if the pipeline id is not empty.
        workflow_manifest:
          type: string
          description: |-
            Optional input field. The marshalled raw argo JSON workflow.
            This will be deprecated when pipeline_manifest is in use.
        pipeline_manifest:
          type: string
          description: Optional input field. The raw pipeline JSON spec.
        parameters:
          title: |-
            The parameter user provide to inject to the pipeline JSON.
            If a default value of a parameter exist in the JSON,
            the value user provided here will replace. V1 only
          type: array
          items:
            $ref: '#/components/schemas/apiParameter'
        runtime_config:
          $ref: '#/components/schemas/PipelineSpecRuntimeConfig'
    apiReadArtifactResponse:
      type: object
      properties:
        data:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: The bytes of the artifact content.
          format: byte
    apiReportRunMetricsRequest:
      type: object
      properties:
        run_id:
          type: string
          description: Required. The parent run ID of the metric.
        metrics:
          type: array
          description: List of metrics to report.
          items:
            $ref: '#/components/schemas/apiRunMetric'
    apiReportRunMetricsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ReportRunMetricsResponseReportRunMetricResult'
    apiRun:
      type: object
      properties:
        id:
          type: string
          description: Output. Unique run ID. Generated by API server.
        name:
          type: string
          description: |-
            Required input field. Name provided by user,
            or auto generated if run is created by scheduled job. Not unique.
        storage_state:
          $ref: '#/components/schemas/apiRunStorageState'
        description:
          title: Optional input field. Describing the purpose of the run
          type: string
        pipeline_spec:
          $ref: '#/components/schemas/apiPipelineSpec'
        resource_references:
          type: array
          description: |-
            Optional input field. Specify which resource this run belongs to.
            When creating a run from a particular pipeline version, the pipeline
            version can be specified here.
          items:
            $ref: '#/components/schemas/apiResourceReference'
        service_account:
          type: string
          description: Optional input field. Specify which Kubernetes service account
            this run uses.
        created_at:
          type: string
          description: Output. The time that the run created.
          format: date-time
        scheduled_at:
          type: string
          description: |-
            Output. When this run is scheduled to run. This could be different from
            created_at. For example, if a run is from a backfilling job that was
            supposed to run 2 month ago, the scheduled_at is 2 month ago,
            v.s. created_at is the current time.
          format: date-time
        finished_at:
          type: string
          description: Output. The time this run is finished.
          format: date-time
        status:
          title: |-
            Output. The status of the run.
            One of [Pending, Running, Succeeded, Skipped, Failed, Error]
          type: string
        error:
          type: string
          description: |-
            In case any error happens retrieving a run field, only run ID
            and the error message is returned. Client has the flexibility of choosing
            how to handle error. This is especially useful during listing call.
        metrics:
          type: array
          description: |-
            Output. The metrics of the run. The metrics are reported by ReportMetrics
            API.
          items:
            $ref: '#/components/schemas/apiRunMetric'
    apiRunDetail:
      type: object
      properties:
        run:
          $ref: '#/components/schemas/apiRun'
        pipeline_runtime:
          $ref: '#/components/schemas/apiPipelineRuntime'
    apiRunMetric:
      type: object
      properties:
        name:
          type: string
          description: |-
            Required. The user defined name of the metric. It must between 1 and 63
            characters long and must conform to the following regular expression:
            `[a-z]([-a-z0-9]*[a-z0-9])?`.
        node_id:
          type: string
          description: |-
            Required. The runtime node ID which reports the metric. The node ID can be
            found in the RunDetail.workflow.Status. Metric with same (node_id, name)
            are considerd as duplicate. Only the first reporting will be recorded. Max
            length is 128.
        number_value:
          type: number
          description: The number value of the metric.
          format: double
        format:
          $ref: '#/components/schemas/RunMetricFormat'
    apiRunStorageState:
      type: string
      default: STORAGESTATE_AVAILABLE
      enum:
        - STORAGESTATE_AVAILABLE
        - STORAGESTATE_ARCHIVED
    protobufNullValue:
      type: string
      description: |-
        `NullValue` is a singleton enumeration to represent the null value for the
        `Value` type union.

         The JSON representation for `NullValue` is JSON `null`.

         - NULL_VALUE: Null value.
      default: NULL_VALUE
      enum:
        - NULL_VALUE
    JobMode:
      type: string
      description: |-
        Required input.

         - DISABLED: The job won't schedule any run if disabled.
      default: UNKNOWN_MODE
      enum:
        - UNKNOWN_MODE
        - ENABLED
        - DISABLED
    apiCronSchedule:
      title: CronSchedule allow scheduling the job with unix-like cron
      type: object
      properties:
        start_time:
          title: The start time of the cron job
          type: string
          format: date-time
        end_time:
          title: The end time of the cron job
          type: string
          format: date-time
        cron:
          title: |-
            The cron string. For details how to compose a cron, visit
            ttps://en.wikipedia.org/wiki/Cron
          type: string
    apiJob:
      type: object
      properties:
        id:
          type: string
          description: Output. Unique run ID. Generated by API server.
        name:
          type: string
          description: Required input field. Job name provided by user. Not unique.
        description:
          title: Optional input field. Describing the purpose of the job
          type: string
        pipeline_spec:
          $ref: '#/components/schemas/apiPipelineSpec'
        resource_references:
          type: array
          description: Optional input field. Specify which resource this job belongs
            to.
          items:
            $ref: '#/components/schemas/apiResourceReference'
        service_account:
          type: string
          description: Optional input field. Specify which Kubernetes service account
            this job uses.
        max_concurrency:
          title: |-
            Required input field.
            Specify how many runs can be executed concurrently. Rage [1-10]
          type: string
          format: int64
        trigger:
          $ref: '#/components/schemas/apiTrigger'
        mode:
          $ref: '#/components/schemas/JobMode'
        created_at:
          type: string
          description: Output. The time this job is created.
          format: date-time
        updated_at:
          type: string
          description: Output. The last time this job is updated.
          format: date-time
        status:
          title: |-
            Output. The status of the job.
            One of [Enable, Disable, Error]
          type: string
        error:
          type: string
          description: |-
            In case any error happens retrieving a job field, only job ID
            and the error message is returned. Client has the flexibility of choosing
            how to handle error. This is especially useful during listing call.
        enabled:
          type: boolean
          description: Input. Whether the job is enabled or not.
          format: boolean
        no_catchup:
          type: boolean
          description: |-
            Optional input field. Whether the job should catch up if behind schedule.
            If true, the job will only schedule the latest interval if behind schedule.
            If false, the job will catch up on each past interval.
          format: boolean
    apiListJobsResponse:
      type: object
      properties:
        jobs:
          type: array
          description: A list of jobs returned.
          items:
            $ref: '#/components/schemas/apiJob'
        total_size:
          type: integer
          description: The total number of jobs for the given query.
          format: int32
        next_page_token:
          type: string
          description: The token to list the next page of jobs.
    apiPeriodicSchedule:
      title: PeriodicSchedule allow scheduling the job periodically with certain interval
      type: object
      properties:
        start_time:
          title: The start time of the periodic job
          type: string
          format: date-time
        end_time:
          title: The end time of the periodic job
          type: string
          format: date-time
        interval_second:
          title: The time interval between the starting time of consecutive jobs
          type: string
          format: int64
    apiTrigger:
      type: object
      properties:
        cron_schedule:
          $ref: '#/components/schemas/apiCronSchedule'
        periodic_schedule:
          $ref: '#/components/schemas/apiPeriodicSchedule'
      description: Trigger defines what starts a pipeline run.
    apiGetTemplateResponse:
      type: object
      properties:
        template:
          type: string
          description: |-
            The template of the pipeline specified in a GetTemplate request, or of a
            pipeline version specified in a GetPipelinesVersionTemplate request.
    apiListPipelineVersionsResponse:
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/apiPipelineVersion'
        next_page_token:
          type: string
          description: The token to list the next page of pipeline versions.
        total_size:
          type: integer
          description: The total number of pipeline versions for the given query.
          format: int32
    apiListPipelinesResponse:
      type: object
      properties:
        pipelines:
          type: array
          items:
            $ref: '#/components/schemas/apiPipeline'
        total_size:
          type: integer
          description: The total number of pipelines for the given query.
          format: int32
        next_page_token:
          type: string
          description: The token to list the next page of pipelines.
    apiPipeline:
      type: object
      properties:
        id:
          type: string
          description: Output. Unique pipeline ID. Generated by API server.
        created_at:
          type: string
          description: Output. The time this pipeline is created.
          format: date-time
        name:
          type: string
          description: |-
            Optional input field. Pipeline name provided by user. If not specified,
            file name is used as pipeline name.
        description:
          type: string
          description: Optional input field. Describing the purpose of the job.
        parameters:
          type: array
          description: |-
            Output. The input parameters for this pipeline.
            TODO(jingzhang36): replace this parameters field with the parameters field
            inside PipelineVersion when all usage of the former has been changed to use
            the latter.
          items:
            $ref: '#/components/schemas/apiParameter'
        url:
          $ref: '#/components/schemas/apiUrl'
        error:
          type: string
          description: |-
            In case any error happens retrieving a pipeline field, only pipeline ID
            and the error message is returned. Client has the flexibility of choosing
            how to handle error. This is especially useful during listing call.
        default_version:
          $ref: '#/components/schemas/apiPipelineVersion'
        resource_references:
          type: array
          description: |-
            Input field. Specify which resource this pipeline belongs to.
            For Pipeline, the only valid resource reference is a single Namespace.
          items:
            $ref: '#/components/schemas/apiResourceReference'
    apiPipelineVersion:
      type: object
      properties:
        id:
          type: string
          description: Output. Unique version ID. Generated by API server.
        name:
          type: string
          description: Optional input field. Version name provided by user.
        created_at:
          type: string
          description: Output. The time this pipeline version is created.
          format: date-time
        parameters:
          type: array
          description: Output. The input parameters for this pipeline.
          items:
            $ref: '#/components/schemas/apiParameter'
        code_source_url:
          type: string
          description: Input. Optional. Pipeline version code source.
        package_url:
          $ref: '#/components/schemas/apiUrl'
        resource_references:
          type: array
          description: |-
            Input. Required. E.g., specify which pipeline this pipeline version belongs
            to.
          items:
            $ref: '#/components/schemas/apiResourceReference'
        description:
          type: string
          description: Input. Optional. Description for the pipeline version.
    apiUrl:
      type: object
      properties:
        pipeline_url:
          type: string
          description: URL of the pipeline definition or the pipeline version definition.
    apiGetHealthzResponse:
      type: object
      properties:
        multi_user:
          title: Returns if KFP in multi-user mode
          type: boolean
          format: boolean
  securitySchemes:
    Bearer:
      type: apiKey
      name: authorization
      in: header
x-original-swagger-version: "2.0"
